AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for Automatic Old IAM Access Key Alerts
Resources:
  ServerlessDeploymentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  HelloLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/ServerlessIAMKeysAlert-dev-hello
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join 
            - '-'
            - - dev
              - ServerlessIAMKeysAlert
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ServerlessIAMKeysAlert-dev*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ServerlessIAMKeysAlert-dev*:*:*
              - Effect: Allow
                Action:
                  - 'iam:GenerateCredentialReport'
                  - 'iam:GenerateServiceLastAccessedDetails'
                  - 'iam:Get*'
                  - 'iam:List*'
                  - 'iam:SimulateCustomPolicy'
                  - 'iam:SimulatePrincipalPolicy'
                  - 'sns:*'
                Resource: '*'
      Path: /
      RoleName: !Join 
        - '-'
        - - ServerlessIAMKeysAlert
          - dev
          - !Ref 'AWS::Region'
          - lambdaRole
  HelloLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/ServerlessIAMKeysAlert/dev/1560537783651-2019-06-14T18:43:03.651Z/ServerlessIAMKeysAlert.zip
      FunctionName: ServerlessIAMKeysAlert-dev-hello
      Handler: handler.hello
      MemorySize: 1024
      Role: !GetAtt 
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs10.x
      Timeout: 6
      Environment:
        Variables:
          ARN: 'arn:aws:sns:us-east-1:317241229763:oldAccessKeyAlert'
          TTL: 1
    DependsOn:
      - HelloLogGroup
      - IamRoleLambdaExecution
  HelloLambdaVersiontYOZL7jDY9Fd9JFSmK3hENO3RaVyAW5rM8yPHWvtxY:
    Type: 'AWS::Lambda::Version'
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref HelloLambdaFunction
      CodeSha256: WRAd0+Ktfim4Yyi2gXTnWBTtxw5ZikqtLPanL26gsl4=
  HelloEventsRuleSchedule1:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - HelloLambdaFunction
            - Arn
          Id: helloSchedule
  HelloLambdaPermissionEventsRuleSchedule1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - HelloLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - HelloEventsRuleSchedule1
        - Arn
Outputs:
  ServerlessDeploymentBucketName:
    Value: !Ref ServerlessDeploymentBucket
  HelloLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref HelloLambdaVersiontYOZL7jDY9Fd9JFSmK3hENO3RaVyAW5rM8yPHWvtxY
